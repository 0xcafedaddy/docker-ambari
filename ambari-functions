############################################
# curl -Lo /tmp/ambari-functions https://raw.githubusercontent.com/sequenceiq/docker-ambari/master/ambari-functions && source /tmp/ambari-functions
############################################

: ${NODE_PREFIX=amb}
: ${AMBARI_SERVER_NAME:=${NODE_PREFIX}0}
: ${MYDOMAIN:=mycorp.kom}
: ${IMAGE:="sequenceiq/ambari"}
: ${DOCKER_OPTS:="--dns 127.0.0.1 --entrypoint /usr/local/serf/bin/start-serf-agent.sh -e KEYCHAIN=$KEYCHAIN"}
: ${DEBUG:=1}
: ${SLEEP_TIME:=2}

amb-clean() {
  unset NODE_PREFIX AMBARI_SERVER_NAME MYDOMAIN IMAGE DOCKER_OPTS DEBUG SLEEP_TIME SERF_JOIN_IP
}

amb-members() {
  get-join-ip
  serf members --rpc-addr $(docker inspect --format "{{.NetworkSettings.IPAddress}}" ${AMBARI_SERVER_NAME}):7373
}
amb-settings() {
  cat <<EOF
  NODE_PREFIX=$NODE_PREFIX
  MYDOMAIN=$MYDOMAIN
  AMBARI_SERVER_NAME=$AMBARI_SERVER_NAME
  IMAGE=$IMAGE
  DOCKER_OPTS=$DOCKER_OPTS
  SERF_JOIN_IP=$SERF_JOIN_IP
EOF
}

debug() {
  [ $DEBUG -gt 0 ] && echo [DEBUG] "$@"
}

docker-ps() {
  #docker ps|sed "s/ \{3,\}/#/g"|cut -d '#' -f 1,2,7|sed "s/#/\t/g"
  docker inspect --format="{{.Name}} {{.NetworkSettings.IPAddress}} {{.Config.Image}} {{.Config.Entrypoint}} {{.Config.Cmd}}" $(docker ps -q)
}

docker-psa() {
  #docker ps|sed "s/ \{3,\}/#/g"|cut -d '#' -f 1,2,7|sed "s/#/\t/g"
  docker inspect --format="{{.Name}} {{.NetworkSettings.IPAddress}} {{.Config.Image}} {{.Config.Entrypoint}} {{.Config.Cmd}}" $(docker ps -qa)
}

get-join-ip() {
  SERF_JOIN_IP=$(docker inspect --format="{{.NetworkSettings.IPAddress}}" ${AMBARI_SERVER_NAME})
  #debug SERF_JOIN_IP=$SERF_JOIN_IP
}

amb-start-first() {
  CMD="docker run -d $DOCKER_OPTS --name $AMBARI_SERVER_NAME -h $AMBARI_SERVER_NAME.$MYDOMAIN $IMAGE --tag ambari-role=server,agent"
  debug $CMD
  $CMD
}

amb-start-node() {
  get-join-ip
  : ${SERF_JOIN_IP:?"SERF_JOIN_IP is needed"}
  NUMBER=${1:?"please give a <NUMBER> parameter it will be used as node<NUMBER>"}
  if [ $# -eq 1 ] ;then
    MORE_OPTIONS="-d"
  else
    shift
    MORE_OPTIONS="$@"
  fi
  CMD="docker run $MORE_OPTIONS -e SERF_JOIN_IP=$SERF_JOIN_IP $DOCKER_OPTS --name ${NODE_PREFIX}$NUMBER -h ${NODE_PREFIX}${NUMBER}.$MYDOMAIN $IMAGE --log-level debug"
  debug $CMD
  $CMD
}

_wait-for-grep-command() {
  local STR_TO_GREP=$1
  shift
  local CMD="$@"
  #debug [WAIT] CMD=$CMD STR_TO_GREP=$STR_TO_GREP
  while ! ($CMD|grep $STR_TO_GREP) &> /dev/null ;do
    echo -n .
    sleep $SLEEP_TIME
  done
  debug [DONE]
}

_wait-for-container-ip() {
  AMBARI_HOST=$(docker inspect --format "{{.NetworkSettings.IPAddress}}" $AMBARI_SERVER_NAME)
  debug [OK] AMBARI_HOST=${AMBARI_HOST:?"coudn't get ip of container: $AMBARI_SERVER_NAME"}
}

_wait-for-postgres() {
  debug wait for postgresql starting up in $AMBARI_SERVER_NAME
  _wait-for-grep-command "postgres" "docker top $AMBARI_SERVER_NAME"
}

_wait-for-ambari-agent() {
  debug wait for ambari_agent python procces is up in $AMBARI_SERVER_NAME
  _wait-for-grep-command "ambari_agent" "docker top $AMBARI_SERVER_NAME"
}

_wait-for-ambari-server() {
  debug wait for ambar-server java process is up in $AMBARI_SERVER_NAME
  _wait-for-grep-command "org.apache.ambari.server.controller.AmbariServer" "docker top $AMBARI_SERVER_NAME"
}

_wait-for-running-state() {
  CHECK_URL="$AMBARI_HOST:8080/api/v1/check"

  debug wait for ambari server RUNNIN state at $CHECK_URL
  _wait-for-grep-command RUNNING "curl -s -u admin:admin $CHECK_URL"
}

_wait-for-running-state() {
  CHECK_URL="$AMBARI_HOST:8080/api/v1/check"

  debug wait for ambari server RUNNIN state at $CHECK_URL
  _wait-for-grep-command RUNNING "curl -s -u admin:admin $CHECK_URL"
}

_wait-for-self-connected-agent() {
  debug wait for self connected ambari-agent
  _wait-for-grep-command $AMBARI_SERVER_NAME.$MYDOMAIN "curl -s -u admin:admin $AMBARI_HOST:8080/api/v1/hosts"
}

amb-wait-for-server() {
_wait-for-container-ip
_wait-for-postgres
_wait-for-ambari-agent
_wait-for-ambari-server
_wait-for-running-state
_wait-for-self-connected-agent
}

amb-shell() {
  get-join-ip
  CMD="docker run -it sequenceiq/ambari-shell --ambari.host=$SERF_JOIN_IP $@"
  debug $CMD
  $CMD
}
